#!/usr/bin/env python3

def word_frequencies(filename):
    return {}

def main():
    pass

if __name__ == "__main__":
    main()

# Create function word_frequencies that gets a filename as a parameter and returns a dict 
# with the word frequencies. 
# In the dictionary the keys are the words and the corresponding values are the number of times
# that word occurred in the file specified by the function parameter. 
# Read all the lines from the file and split the lines into words using the split() method. 
# Further, 
# remove punctuation from the ends of words using the strip("""!"#$%&'()*,-./:;?@[]_""") method call.

# Test this function in the main function using the file alice.txt. 
# In the output, there should be a word and its count per line separated by a tab:

#The     64
#Project 83
#Gutenberg   26
#EBook   3
#of      303
import re
from unittest import result
ls_lines = [] # list that will store all the lines of the file
ls_words = [] # list that will store the individual words
dic = {} # the dic that will store the word and their frequencies
#d = {}
with open("/Users/Mamba/Library/Application Support/tmc/vscode/mooc-data-analysis-with-python-2021/part02-e04_word_frequencies/src/alice.txt", "r") as f:
    for line in f:
        line = line.strip() # remove leading and trailing spaces (if any)
       
        words = re.split(r'\s', line) # split the lines into words 
        #w = line.split()
        #for wo in w:
         #   wo = wo.strip("""!"#$%&'()*,-./:;?@[]_""")
          #  d[wo] = d.get(wo, 0) + 1

        for word in words:
            #if not re.findall(r'[a-zA-Z0-9]$', j) or not re.findall(r'^[a-zA-Z0-9]', j): # si le mot ne finit/commence pas par une lettre ou chiffre  
            word = word.strip("""!"#$%&'()*,-./:;?@[]_""") # remove punctuation from ends & starts of words
            dic[word] = dic.get(word, 0) + 1
        #for word in words:
            #if word not in dic and word:
            #    dic[word] = 1
            #elif word in dic and word:
            #key_index = list(dic.keys()).index(word)
           
            #dic[word] = list(dic.values())[key_index] + 1
                    
        #ls_lines.append(line)
        #ls_words.append(words)

#result = []
# populate the dictionary

#for i in ls_words:
    #for k, j in enumerate(i):
        #if j not in dic and j: # s'il n'est pas dans le dico et s'il n'est pas vide
            #dic[j] = 1
        #elif j in dic and j:
           
            #key_index = list(dic.keys()).index(j)
           
            #dic[j] = list(dic.values())[key_index] + 1


print(len(dic) - 2424) # i'm off by 1 word
print(dic)



# GÉRER COMMENT ÇA IMPRIME LE RÉSULTAT

#for ind, val in dic.items():
 #   a = str(ind) + "\t" + str(val)
  #  result.append(a)
   
#print(dic.keys(), "\t", dic.values())

